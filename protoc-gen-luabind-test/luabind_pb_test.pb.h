// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: luabind_pb_test.proto

#ifndef PROTOBUF_luabind_5fpb_5ftest_2eproto__INCLUDED
#define PROTOBUF_luabind_5fpb_5ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace luabindpbtest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_luabind_5fpb_5ftest_2eproto();
void protobuf_AssignDesc_luabind_5fpb_5ftest_2eproto();
void protobuf_ShutdownFile_luabind_5fpb_5ftest_2eproto();

class MTest;
class MTestList;

enum ETest {
  kEnumTest_1 = 1,
  kEnumTest_2 = 2,
  kEnumTest_3 = 3
};
bool ETest_IsValid(int value);
const ETest ETest_MIN = kEnumTest_1;
const ETest ETest_MAX = kEnumTest_3;
const int ETest_ARRAYSIZE = ETest_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETest_descriptor();
inline const ::std::string& ETest_Name(ETest value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETest_descriptor(), value);
}
inline bool ETest_Parse(
    const ::std::string& name, ETest* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETest>(
    ETest_descriptor(), name, value);
}
// ===================================================================

class MTest : public ::google::protobuf::Message {
 public:
  MTest();
  virtual ~MTest();

  MTest(const MTest& from);

  inline MTest& operator=(const MTest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MTest& default_instance();

  void Swap(MTest* other);

  // implements Message ----------------------------------------------

  MTest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:luabindpbtest.MTest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_luabind_5fpb_5ftest_2eproto();
  friend void protobuf_AssignDesc_luabind_5fpb_5ftest_2eproto();
  friend void protobuf_ShutdownFile_luabind_5fpb_5ftest_2eproto();

  void InitAsDefaultInstance();
  static MTest* default_instance_;
};
// -------------------------------------------------------------------

class MTestList : public ::google::protobuf::Message {
 public:
  MTestList();
  virtual ~MTestList();

  MTestList(const MTestList& from);

  inline MTestList& operator=(const MTestList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MTestList& default_instance();

  void Swap(MTestList* other);

  // implements Message ----------------------------------------------

  MTestList* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 i_t = 1;
  inline bool has_i_t() const;
  inline void clear_i_t();
  static const int kITFieldNumber = 1;
  inline ::google::protobuf::uint32 i_t() const;
  inline void set_i_t(::google::protobuf::uint32 value);

  // required string s_t = 2;
  inline bool has_s_t() const;
  inline void clear_s_t();
  static const int kSTFieldNumber = 2;
  inline const ::std::string& s_t() const;
  inline void set_s_t(const ::std::string& value);
  inline void set_s_t(const char* value);
  inline void set_s_t(const char* value, size_t size);
  inline ::std::string* mutable_s_t();
  inline ::std::string* release_s_t();
  inline void set_allocated_s_t(::std::string* s_t);

  // required bytes b_t = 3;
  inline bool has_b_t() const;
  inline void clear_b_t();
  static const int kBTFieldNumber = 3;
  inline const ::std::string& b_t() const;
  inline void set_b_t(const ::std::string& value);
  inline void set_b_t(const char* value);
  inline void set_b_t(const void* value, size_t size);
  inline ::std::string* mutable_b_t();
  inline ::std::string* release_b_t();
  inline void set_allocated_b_t(::std::string* b_t);

  // required .luabindpbtest.ETest e_t = 4;
  inline bool has_e_t() const;
  inline void clear_e_t();
  static const int kETFieldNumber = 4;
  inline ::luabindpbtest::ETest e_t() const;
  inline void set_e_t(::luabindpbtest::ETest value);

  // required .luabindpbtest.MTest one = 5;
  inline bool has_one() const;
  inline void clear_one();
  static const int kOneFieldNumber = 5;
  inline const ::luabindpbtest::MTest& one() const;
  inline ::luabindpbtest::MTest* mutable_one();
  inline ::luabindpbtest::MTest* release_one();
  inline void set_allocated_one(::luabindpbtest::MTest* one);

  // repeated uint32 i_all = 6;
  inline int i_all_size() const;
  inline void clear_i_all();
  static const int kIAllFieldNumber = 6;
  inline ::google::protobuf::uint32 i_all(int index) const;
  inline void set_i_all(int index, ::google::protobuf::uint32 value);
  inline void add_i_all(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      i_all() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_i_all();

  // repeated string s_all = 7;
  inline int s_all_size() const;
  inline void clear_s_all();
  static const int kSAllFieldNumber = 7;
  inline const ::std::string& s_all(int index) const;
  inline ::std::string* mutable_s_all(int index);
  inline void set_s_all(int index, const ::std::string& value);
  inline void set_s_all(int index, const char* value);
  inline void set_s_all(int index, const char* value, size_t size);
  inline ::std::string* add_s_all();
  inline void add_s_all(const ::std::string& value);
  inline void add_s_all(const char* value);
  inline void add_s_all(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& s_all() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_s_all();

  // repeated .luabindpbtest.MTest m_all = 8;
  inline int m_all_size() const;
  inline void clear_m_all();
  static const int kMAllFieldNumber = 8;
  inline const ::luabindpbtest::MTest& m_all(int index) const;
  inline ::luabindpbtest::MTest* mutable_m_all(int index);
  inline ::luabindpbtest::MTest* add_m_all();
  inline const ::google::protobuf::RepeatedPtrField< ::luabindpbtest::MTest >&
      m_all() const;
  inline ::google::protobuf::RepeatedPtrField< ::luabindpbtest::MTest >*
      mutable_m_all();

  // @@protoc_insertion_point(class_scope:luabindpbtest.MTestList)
 private:
  inline void set_has_i_t();
  inline void clear_has_i_t();
  inline void set_has_s_t();
  inline void clear_has_s_t();
  inline void set_has_b_t();
  inline void clear_has_b_t();
  inline void set_has_e_t();
  inline void clear_has_e_t();
  inline void set_has_one();
  inline void clear_has_one();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* s_t_;
  ::google::protobuf::uint32 i_t_;
  int e_t_;
  ::std::string* b_t_;
  ::luabindpbtest::MTest* one_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > i_all_;
  ::google::protobuf::RepeatedPtrField< ::std::string> s_all_;
  ::google::protobuf::RepeatedPtrField< ::luabindpbtest::MTest > m_all_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_luabind_5fpb_5ftest_2eproto();
  friend void protobuf_AssignDesc_luabind_5fpb_5ftest_2eproto();
  friend void protobuf_ShutdownFile_luabind_5fpb_5ftest_2eproto();

  void InitAsDefaultInstance();
  static MTestList* default_instance_;
};
// ===================================================================


// ===================================================================

// MTest

// required string name = 1;
inline bool MTest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MTest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MTest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MTest::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MTest::name() const {
  return *name_;
}
inline void MTest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MTest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MTest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MTest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MTest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MTest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 value = 2;
inline bool MTest::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MTest::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MTest::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MTest::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 MTest::value() const {
  return value_;
}
inline void MTest::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// MTestList

// required uint32 i_t = 1;
inline bool MTestList::has_i_t() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MTestList::set_has_i_t() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MTestList::clear_has_i_t() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MTestList::clear_i_t() {
  i_t_ = 0u;
  clear_has_i_t();
}
inline ::google::protobuf::uint32 MTestList::i_t() const {
  return i_t_;
}
inline void MTestList::set_i_t(::google::protobuf::uint32 value) {
  set_has_i_t();
  i_t_ = value;
}

// required string s_t = 2;
inline bool MTestList::has_s_t() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MTestList::set_has_s_t() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MTestList::clear_has_s_t() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MTestList::clear_s_t() {
  if (s_t_ != &::google::protobuf::internal::kEmptyString) {
    s_t_->clear();
  }
  clear_has_s_t();
}
inline const ::std::string& MTestList::s_t() const {
  return *s_t_;
}
inline void MTestList::set_s_t(const ::std::string& value) {
  set_has_s_t();
  if (s_t_ == &::google::protobuf::internal::kEmptyString) {
    s_t_ = new ::std::string;
  }
  s_t_->assign(value);
}
inline void MTestList::set_s_t(const char* value) {
  set_has_s_t();
  if (s_t_ == &::google::protobuf::internal::kEmptyString) {
    s_t_ = new ::std::string;
  }
  s_t_->assign(value);
}
inline void MTestList::set_s_t(const char* value, size_t size) {
  set_has_s_t();
  if (s_t_ == &::google::protobuf::internal::kEmptyString) {
    s_t_ = new ::std::string;
  }
  s_t_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MTestList::mutable_s_t() {
  set_has_s_t();
  if (s_t_ == &::google::protobuf::internal::kEmptyString) {
    s_t_ = new ::std::string;
  }
  return s_t_;
}
inline ::std::string* MTestList::release_s_t() {
  clear_has_s_t();
  if (s_t_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = s_t_;
    s_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MTestList::set_allocated_s_t(::std::string* s_t) {
  if (s_t_ != &::google::protobuf::internal::kEmptyString) {
    delete s_t_;
  }
  if (s_t) {
    set_has_s_t();
    s_t_ = s_t;
  } else {
    clear_has_s_t();
    s_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes b_t = 3;
inline bool MTestList::has_b_t() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MTestList::set_has_b_t() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MTestList::clear_has_b_t() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MTestList::clear_b_t() {
  if (b_t_ != &::google::protobuf::internal::kEmptyString) {
    b_t_->clear();
  }
  clear_has_b_t();
}
inline const ::std::string& MTestList::b_t() const {
  return *b_t_;
}
inline void MTestList::set_b_t(const ::std::string& value) {
  set_has_b_t();
  if (b_t_ == &::google::protobuf::internal::kEmptyString) {
    b_t_ = new ::std::string;
  }
  b_t_->assign(value);
}
inline void MTestList::set_b_t(const char* value) {
  set_has_b_t();
  if (b_t_ == &::google::protobuf::internal::kEmptyString) {
    b_t_ = new ::std::string;
  }
  b_t_->assign(value);
}
inline void MTestList::set_b_t(const void* value, size_t size) {
  set_has_b_t();
  if (b_t_ == &::google::protobuf::internal::kEmptyString) {
    b_t_ = new ::std::string;
  }
  b_t_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MTestList::mutable_b_t() {
  set_has_b_t();
  if (b_t_ == &::google::protobuf::internal::kEmptyString) {
    b_t_ = new ::std::string;
  }
  return b_t_;
}
inline ::std::string* MTestList::release_b_t() {
  clear_has_b_t();
  if (b_t_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = b_t_;
    b_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MTestList::set_allocated_b_t(::std::string* b_t) {
  if (b_t_ != &::google::protobuf::internal::kEmptyString) {
    delete b_t_;
  }
  if (b_t) {
    set_has_b_t();
    b_t_ = b_t;
  } else {
    clear_has_b_t();
    b_t_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .luabindpbtest.ETest e_t = 4;
inline bool MTestList::has_e_t() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MTestList::set_has_e_t() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MTestList::clear_has_e_t() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MTestList::clear_e_t() {
  e_t_ = 1;
  clear_has_e_t();
}
inline ::luabindpbtest::ETest MTestList::e_t() const {
  return static_cast< ::luabindpbtest::ETest >(e_t_);
}
inline void MTestList::set_e_t(::luabindpbtest::ETest value) {
  assert(::luabindpbtest::ETest_IsValid(value));
  set_has_e_t();
  e_t_ = value;
}

// required .luabindpbtest.MTest one = 5;
inline bool MTestList::has_one() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MTestList::set_has_one() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MTestList::clear_has_one() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MTestList::clear_one() {
  if (one_ != NULL) one_->::luabindpbtest::MTest::Clear();
  clear_has_one();
}
inline const ::luabindpbtest::MTest& MTestList::one() const {
  return one_ != NULL ? *one_ : *default_instance_->one_;
}
inline ::luabindpbtest::MTest* MTestList::mutable_one() {
  set_has_one();
  if (one_ == NULL) one_ = new ::luabindpbtest::MTest;
  return one_;
}
inline ::luabindpbtest::MTest* MTestList::release_one() {
  clear_has_one();
  ::luabindpbtest::MTest* temp = one_;
  one_ = NULL;
  return temp;
}
inline void MTestList::set_allocated_one(::luabindpbtest::MTest* one) {
  delete one_;
  one_ = one;
  if (one) {
    set_has_one();
  } else {
    clear_has_one();
  }
}

// repeated uint32 i_all = 6;
inline int MTestList::i_all_size() const {
  return i_all_.size();
}
inline void MTestList::clear_i_all() {
  i_all_.Clear();
}
inline ::google::protobuf::uint32 MTestList::i_all(int index) const {
  return i_all_.Get(index);
}
inline void MTestList::set_i_all(int index, ::google::protobuf::uint32 value) {
  i_all_.Set(index, value);
}
inline void MTestList::add_i_all(::google::protobuf::uint32 value) {
  i_all_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MTestList::i_all() const {
  return i_all_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MTestList::mutable_i_all() {
  return &i_all_;
}

// repeated string s_all = 7;
inline int MTestList::s_all_size() const {
  return s_all_.size();
}
inline void MTestList::clear_s_all() {
  s_all_.Clear();
}
inline const ::std::string& MTestList::s_all(int index) const {
  return s_all_.Get(index);
}
inline ::std::string* MTestList::mutable_s_all(int index) {
  return s_all_.Mutable(index);
}
inline void MTestList::set_s_all(int index, const ::std::string& value) {
  s_all_.Mutable(index)->assign(value);
}
inline void MTestList::set_s_all(int index, const char* value) {
  s_all_.Mutable(index)->assign(value);
}
inline void MTestList::set_s_all(int index, const char* value, size_t size) {
  s_all_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MTestList::add_s_all() {
  return s_all_.Add();
}
inline void MTestList::add_s_all(const ::std::string& value) {
  s_all_.Add()->assign(value);
}
inline void MTestList::add_s_all(const char* value) {
  s_all_.Add()->assign(value);
}
inline void MTestList::add_s_all(const char* value, size_t size) {
  s_all_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MTestList::s_all() const {
  return s_all_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MTestList::mutable_s_all() {
  return &s_all_;
}

// repeated .luabindpbtest.MTest m_all = 8;
inline int MTestList::m_all_size() const {
  return m_all_.size();
}
inline void MTestList::clear_m_all() {
  m_all_.Clear();
}
inline const ::luabindpbtest::MTest& MTestList::m_all(int index) const {
  return m_all_.Get(index);
}
inline ::luabindpbtest::MTest* MTestList::mutable_m_all(int index) {
  return m_all_.Mutable(index);
}
inline ::luabindpbtest::MTest* MTestList::add_m_all() {
  return m_all_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::luabindpbtest::MTest >&
MTestList::m_all() const {
  return m_all_;
}
inline ::google::protobuf::RepeatedPtrField< ::luabindpbtest::MTest >*
MTestList::mutable_m_all() {
  return &m_all_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace luabindpbtest

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::luabindpbtest::ETest>() {
  return ::luabindpbtest::ETest_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_luabind_5fpb_5ftest_2eproto__INCLUDED
